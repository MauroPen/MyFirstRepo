COMPARISON AMONG TIMES OF EXECUTION FOR DIFFERENT ALGORITHMS

Current algorithm (v1.0):

- N = 23, T = 1000: 36s

- N = 100, T = 1000: 6m 10s - 6m 20s

Nested Ifs:

if (people[personId].birthday.day == people[other_personId].birthday.day):

        if (people[personId].birthday.month == people[other_personId].birthday.month):

- N = 23, T = 1000: 34s

- N = 100, T = 1000: 6m 09s - 6m 12s

Ordered list:

orderedPeople = sorted(people, key = lambda person: (person.birthday.month, person.birthday.day), reverse = False)      #Ordering people to perform a single check per person

        for personId in peopleList[:-1]:

            if (orderedPeople[personId].birthday.day == orderedPeople[personId + 1].birthday.day):

                if (orderedPeople[personId].birthday.month == orderedPeople[personId + 1].birthday.month):

                    personIndex = next((person for person in people if person.id == orderedPeople[personId].id), None).id

                    otherPersonIndex = next((person for person in people if person.id == orderedPeople[personId + 1].id), None).id
                    
                    people[personIndex].birthday_match = True

                    peopleTable.at[(values["People"] * (trial - 1) + personIndex), "Birthday_Match"] = True     #Looking for the correspondent row in peopleTable

                    people[otherPersonIndex].birthday_match = True

                    peopleTable.at[(values["People"] * (trial - 1) + otherPersonIndex), "Birthday_Match"] = True     #Looking for the correspondent row in peopleTable

- N = 23, T = 1000: 35s

- N = 100, T = 1000: 6m 30s - 6m 40s

No algorithm has proven to perform significantly better than the others.

UPDATE

By analysing the times of execution of the different phases it has been proven that the majority of the time of execution is taken
not by running the algorithm performing checks among birthdays but rather filling peopleTable while creating people.

1ST INTERVENTION: indexing is done in peopleTrialTable which is then concat() with peopleTable DONE

    - Difference in performance (N = 100, T = 1000): 4m 49s vs 1m 31s

2ND INTERVENTION: indexing is abandoned, peopleTable is populated through an array of arrays

    - The idea is to use an array of arrays instead of peopleTable as a dataframe to register all the people created and update Birthday_Match as True
    - The dataframe is created from the array of arrays only if the user want to export the results
    - Difference in performance (N = 23, T = 1000): 35s vs 3s
    - Difference in performance (N = 100, T = 1000): 1m 31s vs 1m 21s

3RD INTERVENTION: adopting an array of arrays dramatically reduces the time of execution, but only if the amount of arrays stored is limited, otherwise the indexing problem hits back

    - The idea is to use the same approach as 1st intervention to stabilize times of execution through multiple trials
    - Difference in performance (N = 100, T = 1000): 1m 21s vs 7s

The heaviest part of the computation is now moved to the file export phase, which is less critical (it is alwyas possible to change file format).